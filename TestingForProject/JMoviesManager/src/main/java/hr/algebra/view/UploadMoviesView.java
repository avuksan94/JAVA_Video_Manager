/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.bll.blModels.MovieModel;
import hr.algebra.controller.MovieUploadController;
import hr.algebra.dal.jbModels.MovieArchiveJB;
import hr.algebra.parsers.LocalMovieParser;
import hr.algebra.parsers.MovieParser;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.utilities.NetworkUtils;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author antev
 */
public class UploadMoviesView extends javax.swing.JPanel {

    /**
     * Creates new form UploadMoviesView
     */
    public UploadMoviesView() {
        initComponents();
    }

    private static final String FILENAME = "src/main/resources/movieArchive.xml";
    private DefaultListModel<MovieModel> moviesModelDef;
    private MovieUploadController muController;
    private MovieParser movieParser;
    private LocalMovieParser localMovParser;

    private void loadModel() throws Exception {
        List<MovieModel> movies = muController.getMoviesModel();
        moviesModelDef.clear();
        movies.forEach(moviesModelDef::addElement);
        jlMovies.setModel(moviesModelDef);
    }

    private void init() {
        try {
            initController();
            initLocalMovieParser();
            initParser();
            moviesModelDef = new DefaultListModel<>();
            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(UploadMoviesView.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void initController() throws Exception {
        MovieModel moviesModel = new MovieModel();
        muController = new MovieUploadController(moviesModel, this);
    }

    private void initLocalMovieParser() throws SQLException {
        localMovParser = new LocalMovieParser();
    }

    private void initParser() throws Exception {
        movieParser = new MovieParser();
    }

    private boolean checkInternetConnection() {
        return NetworkUtils.isInternetAvailable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jspMovies = new javax.swing.JScrollPane();
        jlMovies = new javax.swing.JList<>();
        btnUploadMovies = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1200, 800));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jspMovies.setViewportView(jlMovies);

        btnUploadMovies.setText("Upload movies");
        btnUploadMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadMoviesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUploadMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 1036, Short.MAX_VALUE))
                    .addComponent(jspMovies))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(btnUploadMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jspMovies, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadMoviesActionPerformed
        try {
            if (checkInternetConnection()) {
                List<MovieModel> movies = movieParser.parse();
                muController.createMoviesModel(movies);
                loadModel();
            } else {
                MessageUtils.showInformationMessage("No internet connection", "No internet connection, uploading from last saved local file - using JAXB");
                MovieArchiveJB movieArchive = (MovieArchiveJB) JAXBUtils.load(MovieArchiveJB.class, FILENAME);
                List<MovieModel> movies = localMovParser.convertMovieJBToDB(movieArchive.getChannel().getMovies());
                muController.createMoviesModel(movies);
                loadModel();
            }

        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Unrecoverable error", "Unable to upload movies");
            System.out.println(ex.toString());
            System.exit(1);
        }
    }//GEN-LAST:event_btnUploadMoviesActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUploadMovies;
    private javax.swing.JList<MovieModel> jlMovies;
    private javax.swing.JScrollPane jspMovies;
    // End of variables declaration//GEN-END:variables
}
